{"version":3,"sources":["MainClass.js","App.js","reportWebVitals.js","index.js"],"names":["MainClass","props","state","pincode","hospitals","message","handleChange","bind","handleSubmit","event","this","setState","target","value","data","centres","centers","availablity","isAvailable","length","forEach","centre","sessions","session","min_age_limit","available_capacity","hospitalObj","district","district_name","name","push","sort","a","b","filter","x","i","console","log","fetch","then","response","json","processData","preventDefault","class","onSubmit","htmlFor","className","type","id","onChange","href","title","map","hospital","React","Component","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.812ef954.chunk.js","sourcesContent":["import React from 'react';\n\nexport default class MainClass extends React.Component {\n    constructor(props) {\n      super(props);\n      this.state = {\n          pincode: '',\n          hospitals: [],\n          message: ''\n        };\n      this.handleChange = this.handleChange.bind(this);\n      this.handleSubmit = this.handleSubmit.bind(this);\n    }\n  \n    handleChange(event) {\n      this.setState({pincode: event.target.value});\n    }\n    processData(data) {\n        // checks if any of the age is less than 45+\n        let centres = data.centers;\n        let hospitals = [];\n        let availablity = 'None';\n        let isAvailable = 'None';\n        if (centres && centres.length > 0) {\n          centres.forEach(centre => {\n              centre.sessions.forEach(session=> {\n                  if (session.min_age_limit < 45) {\n                      availablity = 'Available';\n                      if (session.available_capacity == 0) {\n                        availablity = 'Booked';\n                      } else {\n                        isAvailable = 'Available';\n                      }\n                  }\n              });\n              let hospitalObj = {\n                  district: centre.district_name,\n                  name: centre.name,\n                  availablity\n              };\n              hospitals.push(hospitalObj);\n          });\n          // sort hospitals by availability\n          hospitals.sort((a,b)=> {\n            if (a.availablity === \"Available\" && b.availablity === \"None\") {\n              return -1;\n            } else if (a.availablity === \"None\" && b.availablity === \"Available\") {\n              return 1;\n            }\n            return 0;\n          });\n          debugger;\n          hospitals = hospitals.filter((x, i) => i < 10);\n          this.setState({hospitals: hospitals});\n          \n      } else {\n        isAvailable = \"Possible invalid pin code\";\n      }\n      this.setState({message: isAvailable});\n    }\n    handleSubmit(event) {\n      console.log('pin code request sent:', this.state.pincode);\n      this.setState({hospitals: {}});\n      fetch(`https://cdn-api.co-vin.in/api/v2/appointment/sessions/public/calendarByPin?pincode=${this.state.pincode}&date=01-05-2021`)\n      .then(response => response.json())\n      .then(data => {\n        console.log(data);\n        this.processData(data);\n      });\n      event.preventDefault();\n    }\n  \n    render() {\n      return (\n        <section class=\"body\">\n        <form onSubmit={this.handleSubmit}>\n          <label htmlFor=\"pincode\" className=\"pincode-label\">Enter pincode:\n          </label>\n            <input type=\"text\" id=\"pincode\" className=\"pincode-text\" value={this.state.pincode} onChange={this.handleChange} />\n          \n          <input type=\"submit\" className=\"btn-availability\" value=\"Check Availability\" />\n        </form>\n        {\n        !(this.state.message ==='' || this.state.message ==='Available') &&\n          <div className=\"availability-msg\">Available at any place: {this.state.message}\n          </div>\n        }\n         {this.state.message === 'Available' && \n            <span>\n              <a href=\"https://www.cowin.gov.in/\" title=\"book on cowin\"> Book on CoWin site</a>\n            </span>\n          }\n        {this.state.hospitals.length > 0 && \n          <table>\n            <th>Place</th>\n            <th>Hospital</th>\n            <th>Availability</th>\n            {this.state.hospitals.map(hospital=> (\n                    <tr>\n                    <td>\n                        {hospital.district}\n                    </td>\n                    <td>\n                        {hospital.name}\n                    </td>\n                    <td>\n                        {hospital.availablity}\n                    </td>\n                    </tr>\n            ))}\n        </table>\n        }\n        <footer>\n          <a href=\"https://trello.com/b/G0AAwP7b/status-board-of-items\">Features board</a>\n          <a href=\"https://github.com/cowinstatus/cowinstatus.github.io\">Github</a>\n        </footer> \n        </section>\n        \n      )\n    }\n  }\n","import './App.css';\nimport MainClass from './MainClass';\nfunction App() {\n  \n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n       <h1>Check <a href=\"https://www.cowin.gov.in/\" title=\"cowin site link\">Cowin</a> Schedule Availability</h1>\n       <sub>This project was initially created to get schedule availability from COWIN site as cowin site didn't contain availability which are now on top page.\n         Will be adding notification feature soon. As of now, you can check if schedule is available for particular location and go to cowin site to book\n       </sub>\n       <MainClass />\n      </header>\n    </div>\n  );\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}